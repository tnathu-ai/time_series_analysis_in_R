# Plot the decomposed components
plot(ts_decomp, col="blue")
# use the unbiased, minimum variance estimator: mean.
# Subtract the mean from the time series
ts_portfolio_detrended <- ts_portfolio - mean(ts_portfolio)
# Plot the detrended time series
plot(ts_portfolio_detrended, type='l', main="Detrended Time Series")
# Fit a regression model
# Create a sequence of time values
t <- seq(1, length(ts_portfolio))
# Fit a linear regression model to the time series
model <- lm(ts_portfolio ~ t)
# Extract the trend component from the model
trend <- predict(model)
# Detrend the time series
ts_portfolio_detrended <- ts_portfolio - trend
# Plot the detrended time series
plot(ts_portfolio_detrended, type='l', main="Detrended Time Series")
# the summary of the deterministic linear trend model
linear_model = lm(ts_portfolio~time(ts_portfolio)) # label the model as linear_model
summary(linear_model)
# the summary of the deterministic linear trend model
linear_model = lm(ts_portfolio~time(ts_portfolio)) # label the model as linear_model
summary(linear_model)
# the summary of the deterministic linear trend model
linear_model = lm(ts_portfolio~time(ts_portfolio)) # label the model as linear_model
summary(linear_model)
plot(ts_portfolio, type='o',ylab='Return (AUD100,000)', main = "Fitted linear model to the Daily Returns of Investment Portfolio", col="blue")
abline(linear_model, col="red") # add the fitted least squares line from linear model
# the summary of the deterministic quadratic trend model
t = time(ts_portfolio)
t2 = t^2
quadratic_model = lm(ts_portfolio~t+t2) # label the model as quadratic_model
summary(quadratic_model)
plot(ts(fitted(quadratic_model)), ylim = c(min(c(fitted(quadratic_model),
as.vector(ts_portfolio))), max(c(fitted(quadratic_model),as.vector(ts_portfolio)))),ylab='Return (AUD100,000)' ,
main = "Fitted quadratic curve to the Daily Returns of Investment Portfolio", col="red")
lines(as.vector(ts_portfolio),type="o", col="blue")
month.=season(ts_portfolio)
# Season() function creates a factor variable showing the months.
# period added to improve table display and this line sets up indicators
season_model=lm(ts_portfolio ~ month.-1) # add -1 to remove the intercept term
summary(season_model)
plot(ts(fitted(season_model)), ylab='Return (AUD100,000)', main = "Fitted seasonal deterministic model without intercept", ylim = c(min(c(fitted(season_model), as.vector(ts_portfolio))), max(c(fitted(season_model), as.vector(ts_portfolio)))), col = "red" )
lines(as.vector(ts_portfolio),type="o", col = "blue")
cosine_model <- lm(ts_portfolio ~ cos(2*pi*time(ts_portfolio)) + sin(2*pi*time(ts_portfolio)))
summary(cosine_model)
plot(ts(fitted(cosine_model)), ylab='Return (AUD100,000)', main = "Fitted cosine wave.",ylim = c(min(c(fitted(cosine_model), as.vector(ts_portfolio))) ,
max(c(fitted(cosine_model), as.vector(ts_portfolio)))
), col = "red" )
lines(as.vector(ts_portfolio),type="o", col="blue")
cyclical_model <- lm(ts_portfolio ~ sin(2*pi*time(ts_portfolio)) + cos(2*pi*time(ts_portfolio)))
summary(cyclical_model)
plot(ts(fitted(cyclical_model)), ylab='Return (AUD100,000)', main = "Fitted Cyclical Model",ylim = c(min(c(fitted(cyclical_model), as.vector(ts_portfolio))) ,
max(c(fitted(cyclical_model), as.vector(ts_portfolio)))
), col = "red" )
lines(as.vector(ts_portfolio),type="o", col="blue")
# Fit linear, quadratic, cosine, cyclical, and seasonal trend models
linear_model <- linear_model
quadratic_model <- quadratic_model
season_model <- season_model
cosine_model <- cosine_model
cyclical_model <- cyclical_model
# Compute the residual sum of squares (RSS) for each model
linear_RSS <- sum(resid(linear_model)^2)
quadratic_RSS <- sum(resid(quadratic_model)^2)
season_RSS <- sum(resid(season_model)^2)
cosine_RSS <- sum(resid(cosine_model)^2)
cyclical_RSS <- sum(resid(cyclical_model)^2)
# Compute the R-squared for each model
linear_r_squared <- summary(linear_model)$r.squared
quadratic_r_squared <- summary(quadratic_model)$r.squared
season_r_squared <- summary(season_model)$r.squared
cosine_r_squared <- summary(cosine_model)$r.squared
cyclical_r_squared <- summary(cyclical_model)$r.squared
# Print the RSS for each model
cat("Linear Model RSS:", linear_RSS, "\n")
cat("Quadratic Model RSS:", quadratic_RSS, "\n")
cat("Seasonal Model RSS:", season_RSS, "\n")
cat("Cosine Model RSS:", cosine_RSS, "\n")
cat("Cyclical Model RSS:", cyclical_RSS, "\n")
# Print the R-squared for each model
cat("\nLinear Model R-squared:", linear_r_squared, "\n")
cat("Quadratic Model R-squared:", quadratic_r_squared, "\n")
cat("Seasonal Model R-squared:", season_r_squared, "\n")
cat("Cosine Model R-squared:", cosine_r_squared, "\n")
cat("Cyclical Model R-squared:", cyclical_r_squared, "\n")
# Select the model with the lowest RSS
RSS <- c(linear_RSS, quadratic_RSS, season_RSS, cosine_RSS, cyclical_RSS)
best_model <- which.min(RSS)
# Select the model with the highest RSS
R_2 <- c(linear_r_squared, quadratic_r_squared, season_r_squared, cosine_r_squared, cyclical_r_squared)
best_model <- which.min(RSS)
# Print the best fitting model in term of RSS
cat("\nBest Fitting Model in term of RSS:", c("Linear", "Quadratic", "Seasonal","Cosine", "Cyclical")[best_model])
# Print the best fitting model interm of R-squared
cat("\n\nBest Fitting Model in term of R-squared:", c("Linear", "Quadratic", "Seasonal","Cosine", "Cyclical")[best_model])
# Create a data frame of the evaluation metrics
compare_model_df <- data.frame(Model = c("Linear", "Quadratic", "Seasonal","Cosine", "Cyclical"),
R_squared = c(linear_r_squared, quadratic_r_squared, season_r_squared, cosine_r_squared, cyclical_r_squared),
RSS = c(linear_RSS, quadratic_RSS, season_RSS, cosine_RSS, cyclical_RSS))
# Print the data frame
compare_model_df
create_residual_plots <- function(model_list, ts_data) {
n_models <- length(model_list)
par(mfrow=c(ceiling(n_models/2), 2)) # set up multiple plots
for (i in seq_along(model_list)) {
residuals <- rstudent(model_list[[i]])
plot(residuals, xlab='Time', ylab='Standardized Residuals',
type='o', main = paste("Residual Plot for", names(model_list)[i]), col="blue")
}
par(mfrow=c(1, 1)) # reset plot settings
}
models_list <- list(linear_model, quadratic_model, season_model, cosine_model, cyclical_model)
names(models_list) <- c("Linear Model", "Quadratic Model", "Seasonal Model", "Cosine Model", "Cyclical Model")
create_residual_plots(models_list, ts_portfolio)
create_residual_hist_plots <- function(model_list) {
n_models <- length(model_list)
par(mfrow=c(ceiling(n_models/2), 2)) # set up multiple plots
for (i in seq_along(model_list)) {
residuals <- rstudent(model_list[[i]])
hist(residuals, xlab='Standardized Residuals',
main = paste("Histogram of Standardized Residuals for", names(model_list)[i]), col="blue")
}
par(mfrow=c(1, 1)) # reset plot settings
}
models_list <- list(linear_model, quadratic_model, season_model, cosine_model, cyclical_model)
names(models_list) <- c("Linear", "Quadratic", "Seasonal", "Cosine", "Cyclical")
create_residual_hist_plots(models_list)
plot_qq_all_models <- function(model_list) {
n_models <- length(model_list)
par(mfrow=c(ceiling(n_models/2), 2)) # set up multiple plots
for (i in seq_along(model_list)) {
residuals <- rstudent(model_list[[i]])
qqnorm(residuals, col="blue", main = paste("Standardized Residuals Q-Q Plot for", names(model_list)[i]))
qqline(residuals, col = "red")
}
par(mfrow=c(1, 1)) # reset plot settings
}
models <- list(linear_model, quadratic_model, season_model, cosine_model, cyclical_model)
names(models) <- c("Linear Model", "Quadratic Model", "Seasonal Model", "Cosine Model", "Cyclical Model")
plot_qq_all_models(models)
shapiro_test <- function(model) {
residuals <- rstudent(model)
shapiro.test(residuals)
}
for (i in seq_along(models)) {
print(names(models)[i])
print(shapiro_test(models[[i]]))
}
plot_standardized_resid_acf <- function(models_list) {
for (i in 1:length(models_list)) {
model_name <- deparse(substitute(models_list[[i]]))
resid <- rstudent(models_list[[i]])
acf(resid, main = paste0("ACF of standardized residuals for ", names(models)[i]))
}
}
models <- list(linear_model, quadratic_model, season_model, cosine_model, cyclical_model)
names(models) <- c("Linear Model", "Quadratic Model", "Seasonal Model", "Cosine Model", "Cyclical Model")
plot_standardized_resid_acf(models)
h <- 15 # 15 steps ahead forecasts
t <- time(ts_portfolio)
aheadTimes <- data.frame(t = seq(max(t) + 1, max(t) + h, 1))
frcModel1 <- predict(quadratic_model, newdata = aheadTimes, interval = "prediction")
plot(ts(fitted(consine_model),freq=12,start=c(1964,1)),ylab='Return (AUD100,000)',type='l',
ylim=range(c(fitted(consine_model),ts_portfolio)),main="Figure 6. Fitted model to average monthly temperature series.", col="blue")
plot(y=rstudent(consine_model),x=as.vector(time(ts_portfolio)), xlab='Time',ylab='Standardized Residuals',type='o', main = "Figure 7. Time series plot of residuals.")
plot(y=rstudent(cosine_model),x=as.vector(time(ts_portfolio)), xlab='Time',ylab='Standardized Residuals',type='o', main = "Figure 7. Time series plot of residuals.")
plot(y=rstudent(consine_model),x=as.vector(fitted(consine_model)), xlab='Fitted Trend Values', ylab='Standardized Residuals',type='n', main = "Figure 9. Time series plot of standardised residuals
versus fitted trend values.")
plot(y=rstudent(consine_model),x=as.vector(fitted(cosine_model)), xlab='Fitted Trend Values', ylab='Standardized Residuals',type='n', main = "Figure 9. Time series plot of standardised residuals
versus fitted trend values.")
plot(y=rstudent(consine_model),x=as.vector(fitted(cosine_model)), xlab='Fitted Trend Values', ylab='Standardized Residuals',type='n', main = "Figure 9. Time series plot of standardised residuals
versus fitted trend values.")
t = time(ts_portfolio) # Create time points for model fitting
model1 = lm(ts_portfolio~t) # label the model as model1
h = 15 # 5 steps ahed forecasts
# Now we will implement the two-step algorithm
new = data.frame(t = seq((length(t)+1), (length(t)+h), 1)) # Step 1
# Notice here that I'm using the same variable name "t" as in the
# fitted model above, where the name of the variable showing time
# is also "t". To run the predict() function properly,
# the names of variables in fitted model and "new" data frame
# must be the same!!!
forecasts = predict(quadratic_model, new, interval = "prediction")
t = time(ts_portfolio) # Create time points for model fitting
model1 = lm(ts_portfolio~t) # label the model as model1
h = 15 # 5 steps ahed forecasts
# Now we will implement the two-step algorithm
new = data.frame(t = seq((length(t)+1), (length(t)+h), 1)) # Step 1
# Notice here that I'm using the same variable name "t" as in the
# fitted model above, where the name of the variable showing time
# is also "t". To run the predict() function properly,
# the names of variables in fitted model and "new" data frame
# must be the same!!!
forecasts = predict(linear_model, new, interval = "prediction")
# Here interval argument shows the prediction interval
print(forecasts)
t = time(ts_portfolio) # Create time points for model fitting
model1 = lm(ts_portfolio~t) # label the model as model1
h = 15 # 5 steps ahed forecasts
# Now we will implement the two-step algorithm
new = data.frame(t = seq((length(t)+1), (length(t)+h), 1)) # Step 1
# Notice here that I'm using the same variable name "t" as in the
# fitted model above, where the name of the variable showing time
# is also "t". To run the predict() function properly,
# the names of variables in fitted model and "new" data frame
# must be the same!!!
forecasts = predict(quadratic_model, new, interval = "prediction")
plot(ts_portfolio, xlim = c(1,66), ylim = c(-3, 11), ylab = "Random walk data", main = "Figure 17. Random walk series with forecasts.")
# We need to convert forecasts to time series object starting from the first
# time steps-ahead to be able to use plot function.
# We do this for all columns of forecasts
lines(ts(as.vector(forecasts[,1]), start = 253), col="red", type="l")
lines(ts(as.vector(forecasts[,2]), start = 253), col="blue", type="l")
lines(ts(as.vector(forecasts[,3]), start = 253), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"), text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
# forecast the next 15 trading days using the trend model
forecast <- predict(trend_model, newportfolio = portfolio.frame(time = 128:142), interval = "prediction", level = 0.95)
# forecast the next 15 trading days using the trend model
forecast <- predict(quadratic_model, newportfolio = portfolio.frame(time = 128:142), interval = "prediction", level = 0.95)
# plot the forecasted values
plot(ts_portfolio, main = "Portfolio Returns Forecast", xlim = c(1, 142), ylim = c(80, 180))
lines(forecast[,1], col = "red")
lines(forecast[,2:3], col = "blue", lty = "dashed")
forecast
# forecast the next 15 trading days using the quadratic model
forecast <- predict(quadratic_model, newdata = portfolio.frame(time = 128:142), interval = "prediction", level = 0.95)
# forecast the next 15 trading days using the quadratic model
forecast <- predict(quadratic_model, newdata = ts_portfolio.frame(time = 128:142), interval = "prediction", level = 0.95)
# forecast the next 15 trading days using the trend model
forecast <- predict(quadratic_model, newportfolio = portfolio.frame(time = 128:142), interval = "prediction", level = 0.95)
# plot the forecasted values
plot(ts_portfolio, main = "Portfolio Returns Forecast", xlim = c(1, 142), ylim = c(80, 180))
lines(forecast[,1], col = "red")
lines(forecast[,2:3], col = "blue", lty = "dashed")
# forecast the next 15 trading days using the quadratic model
forecast <- predict(quadratic_model, newportfolio = portfolio.frame(time = 128:142), interval = "prediction", level = 0.95)
# plot the forecasted values
plot(ts_portfolio, main = "Portfolio Returns Forecast", xlim = c(1, 142), ylim = c(80, 180))
lines(forecast[,1], col = "red")
lines(forecast[,2:3], col = "blue", lty = "dashed")
forecast
h <- 15 # 20 steps ahead forecasts
t <- time(ts_portfolio)
t2 <- t^2
aheadTimes <- data.frame(t = seq(127, 127+h, 1),
t2 = seq(2017, 2017+h, 1)^2)
frcModel2 <- predict(quadratic_model, newdata = aheadTimes, interval = "prediction")
h <- 15 # 20 steps ahead forecasts
t <- time(ts_portfolio)
t2 <- t^2
aheadTimes <- data.frame(t = seq(127, 127+h, 1),
t2 = seq(2017, 2017+h, 1)^2)
frcModel2 <- predict(quadratic_model, newdata = aheadTimes, interval = "prediction")
frcModel2
plot(ts_portfolio, xlim= c(1961,2017+h+1), ylim = c(32,41),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 2017), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 2017), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 2017), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1961,2017+h+1), ylim = c(32,41),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
h <- 15 # 20 steps ahead forecasts
t <- time(ts_portfolio)
t2 <- t^2
aheadTimes <- data.frame(t = seq(127, 127+h, 1),
t2 = seq(2017, 2017+h, 1)^2)
frcModel2 <- predict(quadratic_model, newdata = aheadTimes, interval = "prediction")
frcModel2
plot(ts_portfolio, xlim= c(1961,2017+h+1), ylim = c(32,41),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,217+h+1), ylim = c(32,41),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(100,217+h+1), ylim = c(32,41),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,217+h+1), ylim = c(32,41),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,217+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,217+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,100+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,80+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,70+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,60+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
h <- 15 # 15 steps ahead forecasts
t <- time(ts_portfolio)
t2 <- t^2
aheadTimes <- data.frame(t = seq(127, 127+h, 1),
t2 = seq(127, 127+h, 1)^2)
frcModel2 <- predict(quadratic_model, newdata = aheadTimes, interval = "prediction")
frcModel2
plot(ts_portfolio, xlim= c(1,60+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,127+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 217), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 217), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 217), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,127+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 127), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 127), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 127), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,127+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(frcModel2[,3]), start = 127), col="blue", type="l")
lines(ts(as.vector(frcModel2[,1]), start = 127), col="red", type="l")
lines(ts(as.vector(frcModel2[,2]), start = 127), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
h <- 15 # 15 steps ahead forecasts
t <- time(ts_portfolio)
t2 <- t^2
aheadTimes <- data.frame(t = seq(127, 127+h, 1),
t2 = seq(127, 127+h, 1)^2)
frcModel2 <- predict(quadratic_model, newdata = aheadTimes, interval = "prediction")
frcModel2
h <- 15 # 15 steps ahead forecasts
t <- time(ts_portfolio)
t2 <- t^2
aheadTimes <- data.frame(t = seq(127, 127+h, 1),
t2 = seq(127, 127+h, 1)^2)
quadratic_model_prediction <- predict(quadratic_model, newdata = aheadTimes, interval = "prediction")
quadratic_model_prediction
plot(ts_portfolio, xlim= c(1,127+h+1), ylim = c(-50,157),
ylab = "Portfolio series",
main = "Forecasts from the quadratic model fitted to the Portfolio-use series.")
lines(ts(as.vector(quadratic_model_prediction[,3]), start = 127), col="blue", type="l")
lines(ts(as.vector(quadratic_model_prediction[,1]), start = 127), col="red", type="l")
lines(ts(as.vector(quadratic_model_prediction[,2]), start = 127), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,127+h+1), ylim = c(-50,157),
ylab = "Return (AUD100,000)",
main = "Sample forecasts from the quadratic model for the next 15 trading days")
lines(ts(as.vector(quadratic_model_prediction[,3]), start = 127), col="blue", type="l")
lines(ts(as.vector(quadratic_model_prediction[,1]), start = 127), col="red", type="l")
lines(ts(as.vector(quadratic_model_prediction[,2]), start = 127), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 18,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,127+h+1), ylim = c(-50,157),
ylab = "Return (AUD100,000)",
main = "Sample forecasts from the quadratic model for the next 15 trading days")
lines(ts(as.vector(quadratic_model_prediction[,3]), start = 127), col="blue", type="l")
lines(ts(as.vector(quadratic_model_prediction[,1]), start = 127), col="red", type="l")
lines(ts(as.vector(quadratic_model_prediction[,2]), start = 127), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 12,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,127+h+1), ylim = c(-50,157),
ylab = "Return (AUD100,000)",
main = "Sample forecasts from the quadratic model for the next 15 trading days")
lines(ts(as.vector(quadratic_model_prediction[,3]), start = 127), col="blue", type="l")
lines(ts(as.vector(quadratic_model_prediction[,1]), start = 127), col="red", type="l")
lines(ts(as.vector(quadratic_model_prediction[,2]), start = 127), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 12,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,127+h+1), ylim = c(-50,157),
ylab = "Return (AUD100,000)",
main = "Sample forecasts from quadratic model for the next 15 trading days")
lines(ts(as.vector(quadratic_model_prediction[,3]), start = 127), col="blue", type="l")
lines(ts(as.vector(quadratic_model_prediction[,1]), start = 127), col="red", type="l")
lines(ts(as.vector(quadratic_model_prediction[,2]), start = 127), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 12,
c("Data","5% forecast limits", "Forecasts"))
plot(ts_portfolio, xlim= c(1,127+h+1), ylim = c(-50,157),
ylab = "Return (AUD100,000)",
main = "Sample forecasts from Quadratic Model for the next 15 trading days")
lines(ts(as.vector(quadratic_model_prediction[,3]), start = 127), col="blue", type="l")
lines(ts(as.vector(quadratic_model_prediction[,1]), start = 127), col="red", type="l")
lines(ts(as.vector(quadratic_model_prediction[,2]), start = 127), col="blue", type="l")
legend("topleft", lty=1, pch=1, col=c("black","blue","red"),
text.width = 12,
c("Data","5% forecast limits", "Forecasts"))
rm(list=ls())
library(TSA)
library(tseries)
portfolio <- read.csv("assignment1Data2023.csv", header=TRUE)
# Add a column header
colnames(portfolio) <- c("id", "x")
# class of the data set
class(portfolio)
# View the data set
print(portfolio)
# summary statistics
summary(portfolio)
# Create the ACF plot for original portfolio data
acf(portfolio)
# Find the frequency
frequency(portfolio)
# Convert to time series object
freq <- 252/as.numeric(diff(range(portfolio$id), units = "days"))
ts_portfolio <- ts(portfolio$x, frequency = freq)
# Check the structure of the time series object
str(ts_portfolio)
# class of the converted data
class(ts_portfolio)
# View the time series object
print(ts_portfolio)
# Create the ACF plot
acf(ts_portfolio)
# Find the frequency
frequency(ts_portfolio)
